"""
这个文件中会定义两个agent的通讯相关的base model 以及相关的state的构造和某些的输入输出state的构造
SQLAgent → InfoAgent：信息查询请求类型：
| 交互类型            | 描述                              | 示例内容                                |
| --------------- | ------------------------------- | ----------------------------------- |
| 1. 初始schema询问   | 用户query到来后，询问数据库的大致结构           | "有哪些表？它们分别是什么？"                     |
| 2. 表字段询问        | 在尝试使用某表或字段时报错后，请求进一步的字段信息       | "表 `users` 有哪些字段？"                  |
| 3. 字段含义/共享字段组   | 想知道某字段是否与其他表共享                  | "字段 `user_id` 是不是共享字段？在哪些表中出现？"     |
| 4. 表间关系探索       | 推测Join关系时需要知道哪些表存在共享字段          | "与 `orders` 表可自然Join的表有哪些？"         |
| 5. 错误信息反馈（主动回传） | 在SQL失败时，把错误信息传回InfoAgent以触发结构探索 | "表 `customer` 不存在，可能是 `customers`？" |

InfoAgent → SQLAgent：结构信息回应类型：
| 交互类型      | 描述                       | 示例内容                                                   |
| --------- | ------------------------ | ------------------------------------------------------ |
| 1. 表结构汇总  | 提供某个表的字段及其类型             | "表 `users` 有字段：`user_id`(INT), `name`(TEXT)"           |
| 2. 字段组信息  | 共享字段出现在哪些表中              | "字段 `product_id` 是共享字段，出现于表 `orders`, `inventory`"     |
| 3. 纠错建议   | 基于报错猜测正确的表/字段名           | "表 `customer` 不存在，是否为 `customers`？"                    |
| 4. Join建议 | 指出表之间的潜在连接关系             | "`orders` 可通过字段 `user_id` Join 到 `users` 表"            |
| 5. 全局摘要   | 若SQLAgent请求全局结构概览，生成文本摘要 | "数据库包括 3 张表，分别为...。`orders` 与 `users` 通过 `user_id` 相连" |


系统的整体输入为：
1. 用户query语句
2. 数据库字符串
3. 额外的信息（可选的md文件）

系统的整体输出为：
1. 最终的SQL语句
2. 最终的SQL语句的执行结果csv文件（如果执行成功）

"""