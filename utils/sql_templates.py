# SQL模板文件，用于Snowflake数据库schema信息提取

# 1. 获取当前数据库下所有 Schema（优化版本，过滤系统schema）
GET_ALL_SCHEMAS = """
SELECT SCHEMA_NAME
FROM INFORMATION_SCHEMA.SCHEMATA
WHERE SCHEMA_NAME NOT IN ('INFORMATION_SCHEMA', 'ACCOUNT_USAGE', 'READER_ACCOUNT_USAGE')
    AND SCHEMA_NAME NOT LIKE 'SNOWFLAKE%'
    AND SCHEMA_NAME NOT LIKE 'UTIL_%'
ORDER BY SCHEMA_NAME
LIMIT 100;
"""

# 1.1 获取指定Schema（用于单个schema查询）
GET_SPECIFIC_SCHEMA = """
SELECT SCHEMA_NAME
FROM INFORMATION_SCHEMA.SCHEMATA
WHERE SCHEMA_NAME = '{schema_name}';
"""

# 1.2 获取用户自定义Schema（更安全的查询）
GET_USER_SCHEMAS = """
SELECT SCHEMA_NAME
FROM INFORMATION_SCHEMA.SCHEMATA
WHERE SCHEMA_OWNER != 'ACCOUNTADMIN'
    AND SCHEMA_NAME NOT IN ('INFORMATION_SCHEMA', 'ACCOUNT_USAGE', 'READER_ACCOUNT_USAGE')
    AND SCHEMA_NAME NOT LIKE 'SNOWFLAKE%'
ORDER BY SCHEMA_NAME
LIMIT 50;
"""

# 2. 获取指定Schema下的所有表（优化版本，添加限制）
GET_TABLES_IN_SCHEMA = """
SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE, CREATED, ROW_COUNT
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = '{schema_name}' 
    AND TABLE_TYPE = 'BASE TABLE'
    AND IS_TRANSIENT = 'NO'  -- 排除临时表
ORDER BY TABLE_SCHEMA, TABLE_NAME
LIMIT 200;
"""

# 2.1 获取Schema下表的快速查询（仅基本信息）
GET_TABLES_BASIC = """
SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = '{schema_name}' 
    AND TABLE_TYPE = 'BASE TABLE'
ORDER BY TABLE_NAME
LIMIT 100;
"""

# 3. 获取指定Schema和表的所有列信息（优化版本）
GET_COLUMNS_FOR_TABLE = """
SELECT 
    TABLE_SCHEMA, 
    TABLE_NAME, 
    COLUMN_NAME, 
    ORDINAL_POSITION, 
    COLUMN_DEFAULT, 
    IS_NULLABLE, 
    DATA_TYPE,
    CHARACTER_MAXIMUM_LENGTH,
    NUMERIC_PRECISION,
    NUMERIC_SCALE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = '{schema_name}' 
    AND TABLE_NAME = '{table_name}'
ORDER BY ORDINAL_POSITION
LIMIT 500;  -- 限制列数，避免超大表超时
"""

# 3.1 获取表的基本列信息（快速查询）
GET_COLUMNS_BASIC = """
SELECT 
    COLUMN_NAME, 
    DATA_TYPE,
    IS_NULLABLE,
    ORDINAL_POSITION
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_SCHEMA = '{schema_name}' 
    AND TABLE_NAME = '{table_name}'
ORDER BY ORDINAL_POSITION
LIMIT 100;
"""

# 4. 获取所有Schema的所有列信息（如果需要一次性获取）
GET_ALL_COLUMNS = """
SELECT 
    TABLE_SCHEMA, 
    TABLE_NAME, 
    COLUMN_NAME, 
    ORDINAL_POSITION, 
    COLUMN_DEFAULT, 
    IS_NULLABLE, 
    DATA_TYPE,
    CHARACTER_MAXIMUM_LENGTH,
    NUMERIC_PRECISION,
    NUMERIC_SCALE
FROM INFORMATION_SCHEMA.COLUMNS
ORDER BY TABLE_SCHEMA, TABLE_NAME, ORDINAL_POSITION;
"""

# 5. 获取表约束（主键、唯一约束）
GET_TABLE_CONSTRAINTS = """
SELECT 
    tc.CONSTRAINT_TYPE,
    tc.TABLE_SCHEMA,
    tc.TABLE_NAME,
    tc.CONSTRAINT_NAME,
    kcu.COLUMN_NAME
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu
    ON tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
    AND tc.TABLE_SCHEMA = kcu.TABLE_SCHEMA
    AND tc.TABLE_NAME = kcu.TABLE_NAME
WHERE tc.CONSTRAINT_TYPE IN ('PRIMARY KEY', 'UNIQUE')
ORDER BY tc.TABLE_SCHEMA, tc.TABLE_NAME, tc.CONSTRAINT_TYPE, kcu.ORDINAL_POSITION;
"""

# 6. 获取外键约束
GET_FOREIGN_KEY_CONSTRAINTS = """
SELECT 
    rc.CONSTRAINT_NAME,
    rc.TABLE_SCHEMA,
    rc.TABLE_NAME,
    kcu.COLUMN_NAME,
    rc.REFERENCED_TABLE_SCHEMA,
    rc.REFERENCED_TABLE_NAME,
    kcu_ref.COLUMN_NAME AS REFERENCED_COLUMN_NAME
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc
JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu
    ON rc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
    AND rc.TABLE_SCHEMA = kcu.TABLE_SCHEMA
    AND rc.TABLE_NAME = kcu.TABLE_NAME
JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu_ref
    ON rc.UNIQUE_CONSTRAINT_NAME = kcu_ref.CONSTRAINT_NAME
    AND rc.REFERENCED_TABLE_SCHEMA = kcu_ref.TABLE_SCHEMA
    AND rc.REFERENCED_TABLE_NAME = kcu_ref.TABLE_NAME
    AND kcu.ORDINAL_POSITION = kcu_ref.ORDINAL_POSITION
ORDER BY rc.TABLE_SCHEMA, rc.TABLE_NAME, kcu.ORDINAL_POSITION;
"""

# 7. 获取指定Schema的约束信息
GET_CONSTRAINTS_FOR_SCHEMA = """
SELECT 
    tc.CONSTRAINT_TYPE,
    tc.TABLE_SCHEMA,
    tc.TABLE_NAME,
    tc.CONSTRAINT_NAME,
    kcu.COLUMN_NAME
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu
    ON tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
    AND tc.TABLE_SCHEMA = kcu.TABLE_SCHEMA
    AND tc.TABLE_NAME = kcu.TABLE_NAME
WHERE tc.TABLE_SCHEMA = '{schema_name}'
    AND tc.CONSTRAINT_TYPE IN ('PRIMARY KEY', 'UNIQUE')
ORDER BY tc.TABLE_NAME, tc.CONSTRAINT_TYPE, kcu.ORDINAL_POSITION;
"""

# 8. 获取指定Schema的外键约束
GET_FOREIGN_KEYS_FOR_SCHEMA = """
SELECT 
    rc.CONSTRAINT_NAME,
    rc.TABLE_SCHEMA,
    rc.TABLE_NAME,
    kcu.COLUMN_NAME,
    rc.REFERENCED_TABLE_SCHEMA,
    rc.REFERENCED_TABLE_NAME,
    kcu_ref.COLUMN_NAME AS REFERENCED_COLUMN_NAME
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc
JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu
    ON rc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME
    AND rc.TABLE_SCHEMA = kcu.TABLE_SCHEMA
    AND rc.TABLE_NAME = kcu.TABLE_NAME
JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu_ref
    ON rc.UNIQUE_CONSTRAINT_NAME = kcu_ref.CONSTRAINT_NAME
    AND rc.REFERENCED_TABLE_SCHEMA = kcu_ref.TABLE_SCHEMA
    AND rc.REFERENCED_TABLE_NAME = kcu_ref.TABLE_NAME
    AND kcu.ORDINAL_POSITION = kcu_ref.ORDINAL_POSITION
WHERE rc.TABLE_SCHEMA = '{schema_name}'
ORDER BY rc.TABLE_NAME, kcu.ORDINAL_POSITION;
"""
